version: 2.1
# CircleCi Build Config for CloudState

orbs:
  slack: circleci/slack@3.4.2            # MIT License
  pagerduty: amanjain97/pagerduty@0.1.5  #  MIT License

commands:
  setup_sbt:
    description: "Set up SBT"
    parameters:
      version:
        type: string
        default: "1.3.3"
    steps:
      - run:
          name: Install SBT
          command: |
            curl -L -o sbt-<< parameters.version >>.deb https://dl.bintray.com/sbt/debian/sbt-<< parameters.version >>.deb
            sudo dpkg -i sbt-<< parameters.version >>.deb
            rm sbt-<< parameters.version >>.deb

  save_sbt_cache:
    description: "Save SBT cache"
    steps:
      - save_cache:
          key: sbt-cache-23
          paths:
            - "~/.ivy2/cache"
            - "~/.sbt"
            - "~/.coursier"
  # CS-Auth-Test
  auth_test:
    parameters:
      target_env:
        type: string
        default: "dev"
    steps:
      - run:
          name: Authenticate
          command: |
            target=<< parameters.target_env >>
            if [[ "${target}" == "prod" ]]; then
              url=api.cloudstate.com
            elif [[ "${target}" == "stage" ]]; then
              url=api.lbcs.io
            else
              url=api.lbcs.dev
            fi

            function authenticate() {
              set -x
              url_auth_path=cloudstateengine.lightbend.com/v1alpha/users%3Aauthenticate
              curl --fail -s -H 'Content-Type: application/json' https://"${url}"/"${url_auth_path}" -d \
                "{password: {\"email_or_friendly_name\":\"cloudstate-dev@lightbend.com\", \"password\":\"${CS_DEV_PASSWORD}\"}}"
              set +x
              return $?
            }
            exitCode=0
            # Try a three time after 5 and 10 seconds
            for i in 5 10 0; do
                if ! authenticate "${url}" ; then
                    echo "Failed"
                    exitCode=1
                    echo "sleeping ${i}"
                    sleep "${i}"
                    continue
                else
                    echo "passed"
                    exitCode=0
                    break
                fi
            done
            exit "${exitCode}"
  # CS-SC-Test
  cs_sc_test:
    parameters:
      cart_uri:
        type: string
        default: ""
      sc_test_user:
        type: string
        default: "test-user"
    steps:
      - run:
          name: "Shopping Cart Tests"
          command: |
            SHOP_TEST_USER=<< parameters.sc_test_user >>
            CART_URI=<< parameters.cart_uri >>
            echo "Testing Shopping Data Access: ${CART_URI}"

            function add_delete_items() {
              CART_URI="$1"
              SHOP_TEST_USER="$2"
              get_test_cart=$(curl -s -o /dev/null -w "%{http_code}" $CART_URI/com.example.shoppingcart.ShoppingCart/carts/test-user)

                if [ "${get_test_cart}" -eq 200 ] ; then
                    cart_orig_size=$(curl -s $CART_URI/com.example.shoppingcart.ShoppingCart/carts/${SHOP_TEST_USER} | jq '.items | length')

                    # Add items
                    curl -s -o /dev/null -w "%{http_code}" -H 'Content-Type: application/json' \
                        -d '{"user_id": "'${SHOP_TEST_USER}'", "product_id": "test1", name: "test1", "quantity":1}' \
                        $CART_URI/com.example.shoppingcart.ShoppingCart/cart/${SHOP_TEST_USER}/items/add
                    echo " test1 added"
                    curl -s -o /dev/null -w "%{http_code}" -H 'Content-Type: application/json' \
                        -d '{"user_id": "'${SHOP_TEST_USER}'", "product_id": "test2", name: "test2", "quantity":2}' \
                        $CART_URI/com.example.shoppingcart.ShoppingCart/cart/${SHOP_TEST_USER}/items/add
                    echo " test2 added"
                    curl -s -o /dev/null -w "%{http_code}" -H 'Content-Type: application/json' \
                        -d '{"user_id": "'${SHOP_TEST_USER}'", "product_id": "test3", name: "test3", "quantity":3}' \
                        $CART_URI/com.example.shoppingcart.ShoppingCart/cart/${SHOP_TEST_USER}/items/add
                    echo " test3 added"
                    cart_new_size=$(curl -s $CART_URI/com.example.shoppingcart.ShoppingCart/carts/${SHOP_TEST_USER} | jq '.items | length')
                    echo -e "\n"Added "${cart_new_size}" items to cart
                    cart_size_diff=$(expr "${cart_new_size}" - "${cart_orig_size}" )
                    if [ "${cart_size_diff}" -ne 3 ]; then
                          echo Problem adding items to "'${SHOP_TEST_USER}'" cart !!!
                    fi

                    # Remove items
                    curl -s -X POST $CART_URI/com.example.shoppingcart.ShoppingCart/cart/${SHOP_TEST_USER}/items/test1/remove
                    curl -s -X POST $CART_URI/com.example.shoppingcart.ShoppingCart/cart/${SHOP_TEST_USER}/items/test2/remove
                    curl -s -X POST $CART_URI/com.example.shoppingcart.ShoppingCart/cart/${SHOP_TEST_USER}/items/test3/remove

                    echo "Removed items test1 test2 and test3 "

                    cart_final_size=$(curl -s $CART_URI/com.example.shoppingcart.ShoppingCart/carts/${SHOP_TEST_USER} | jq '.items | length')

                    if [ "${cart_final_size}" != "${cart_orig_size}" ] ; then
                        echo Cart NOT restored to original size. Please check!!!
                        return 1
                    else
                        echo
                        date
                        echo Shopping Test Complete! User: "${SHOP_TEST_USER}"
                    fi
                else
                    echo Unable to Shop "${SHOP_TEST_USER}" Cart not found!
                    return 1
                fi
                return 0
            }
            exitCode=0
            # Try a three time after 5 and 10 seconds
            for i in 5 10 0; do
                if ! add_delete_items "$CART_URI" "${SHOP_TEST_USER}" ; then
                    echo "Failed"
                    exitCode=1
                    echo "sleeping ${i}"
                    sleep "${i}"
                    continue
                else
                    echo "passed"
                    exitCode=0
                    break
                fi
            done
            exit "${exitCode}"

  # Validate-API-Resources
  validate_api_resources:
    parameters:
      gcp_cluster_name:
        type: string
        default: "stage-us-east-execution-1"
      gcp_region:
        type: string
        default: "us-east1"
      gcp_project:
        type: string
        default: "cloudstateengine"
    steps:
      - run:
          name: kubectl list resources
          command: |
            echo "${GCLOUD_SERVICE_KEY}" | gcloud auth activate-service-account --key-file=-
            function kubectl_api_resources() {
              CLUSTER_NAME=$1
              CLUSTER_REGION=$2
              PROJECT=$3
              gcloud container clusters get-credentials "${CLUSTER_NAME}" --region "${CLUSTER_REGION}"  \
                               --project "${PROJECT}"
              kubectl api-resources --verbs=list --namespaced -o name --api-group cloudstate.lightbend.com --v=6
              return $?
            }
            CLUSTER_NAME=<< parameters.gcp_cluster_name >>
            CLUSTER_REGION=<< parameters.gcp_region >>
            PROJECT=<< parameters.gcp_project >>
            exitCode=0
            # Try a three time after 5 and 10 seconds
            for i in 5 10 0; do
                if ! kubectl_api_resources "${CLUSTER_NAME}" "${CLUSTER_REGION}" "${PROJECT}" ; then
                    echo "Failed"
                    exitCode=1
                    echo "sleeping ${i}"
                    sleep "${i}"
                    continue
                else
                    exitCode=0
                    break
                fi
            done
            exit "${exitCode}"

jobs:
  # Native-Image-It-Test
  native-image-it-test:
    machine: true
    resource_class: large
    description: "native image tck tests"
    steps:
      - checkout
      - setup_sbt
      - run: |
          sbt -Dconfig.resource=native-image.conf \
              'set concurrentRestrictions in Global += Tags.limitAll(1)' \
              'set scalafmtOnCompile := false' \
              'dockerBuildNativeDevMode publishLocal' \
              tck/it:test
      - save_sbt_cache

  # Prod-Auth-Test
  prod_auth_test:
    docker:
      - image: circleci/buildpack-deps:focal-curl
    description: "Prod Authentication Test"
    steps:
      - auth_test:
          target_env: "prod"
      - slack/status:
          channel: cloudstate-alerts
          fail_only: true
          failure_message: Unable to authenticate to prod
          mentions: "here"
          only_for_branches: "master"
      - slack/status:
          channel: cloudstate-alerts
          success_message: Successful authentication on prod
          failure_message: Unable to authenticate to prod
      - pagerduty/notify-on-failure:
          from_account: "srikanth.koneru@lightbend.com"
          incident_description: Unable to authenticate to prod
          incident_key:  "AUTHENTICATION_FAILED_ON_PROD"
          incident_title: ${CIRCLE_JOB} Prod Authentication Failed
          only_for_branches: "master"
          priority: "PF2THIO"   # S1
          service: "P97VQEO"    # Cloudstate Production
          urgency: high

  # Stage-Auth-Test
  stage_auth_test:
    docker:
      - image: circleci/buildpack-deps:focal-curl
    description: "Stage Authentication Test"
    steps:
      - auth_test:
          target_env: "stage"
      - slack/status:
          channel: cloudstate-alerts
          success_message: Successful authentication on stage
          failure_message: Unable to authenticate to stage
          mentions: "here"
          fail_only: true
          only_for_branches: "master"
      - slack/status:
          channel: cloudstate-alerts
          success_message: Successful authentication on stage
          failure_message: Unable to authenticate to stage
      - pagerduty/notify-on-failure:
          from_account: "srikanth.koneru@lightbend.com"
          incident_description: Unable to authentticate to stage
          incident_key:  "AUTHENTICATION_FAILED_ON_STAGE"
          incident_title: ${CIRCLE_JOB} Stage Authentication Failed
          only_for_branches: "master"
          priority: "PF2THIO"  # S1
          service: "P06K63Z"   # Cloudstate Stage
          urgency: high

  # Prod-SC-Test
  prod_sc_test:
    docker:
      - image: circleci/buildpack-deps:focal-curl
    description: "Prod Shopping Cart Test"
    steps:
      - cs_sc_test:
          cart_uri: "https://shrill-shadow-4688.us-east1.apps.cloudstate.com"
      - slack/status: # Failed cases
          channel: cloudstate-alerts
          failure_message: Shopping cart tests failed on prod
          mentions: "here"
          fail_only: true
          only_for_branches: "master"
      - slack/status: # All cases
          channel: cloudstate-alerts
          success_message: Shopping cart tests passed on prod
          failure_message: Shopping cart tests failed on prod
      - pagerduty/notify-on-failure:
          from_account: "srikanth.koneru@lightbend.com"
          incident_description: Shopping cart tests failed on prod.
          incident_key:  "SHOPPING_CART_TESTS_FAILED_ON_PROD"
          incident_title: ${CIRCLE_JOB} Prod Shopping Cart Tests Failed
          only_for_branches: "master"
          priority: "PXGHGTY" # S3
          service: "P97VQEO"  # Cloudstate Production
          urgency: high

  # Stage-SC-Test
  stage_sc_test:
    docker:
      - image: circleci/buildpack-deps:focal-curl
    description: "Stage Shopping Cart Test"
    steps:
      - cs_sc_test:
          cart_uri: "https://dry-glade-0573.us-east1.apps.lbcs.io"
      - slack/status: # Fail
          channel: cloudstate-alerts
          failure_message: Shopping cart tests failed on Stage
          mentions: "here"
          fail_only: true
          only_for_branches: "master"
      - slack/status: # All
          channel: cloudstate-alerts
          success_message: Shopping cart tests passed on Stage
          failure_message: Shopping cart tests failed on Stage
      - pagerduty/notify-on-failure:
          from_account: "srikanth.koneru@lightbend.com"
          incident_description: Shopping cart tests failed on Stage.
          incident_key:  "SHOPPING_CART_TESTS_FAILED_ON_STAGE"
          incident_title: ${CIRCLE_JOB} Stage Shopping Cart Tests Failed
          only_for_branches: "master"
          priority: "PXGHGTY" # S3 Partial Outage
          service: "P06K63Z"  # Cloudstate Stage
          urgency: low

  # Dev-SC-Test
  dev_sc_test:
    docker:
      - image: circleci/buildpack-deps:focal-curl
    description: "Dev Shopping Cart Test"
    steps:
      - cs_sc_test:
          cart_uri: "https://lingering-art-1733.us-east1.apps.lbcs.dev"
      - slack/status:
          channel: cloudstate-alerts
          failure_message: Shopping cart tests failed on Dev
          # mentions: "here"
          fail_only: true
          only_for_branches: "master"
      - slack/status:
          channel: cloudstate-alerts
          success_message: Shopping cart tests passed on Dev
          failure_message: Shopping cart tests failed on Dev

  # Prod-VAR-Test
  prod_var_test:
    docker:
      - image: google/cloud-sdk
    description: "Prod Validate API Resources"
    steps:
      - validate_api_resources:
          gcp_cluster_name: "prod-us-east-execution-1"
      - slack/status:
          channel: cloudstate-alerts
          failure_message: Validate API resources failed on prod
          mentions: "here"
          fail_only: true
      - slack/status:
          channel: cloudstate-alerts
          success_message: Validate API resources passed on prod
          failure_message: Validate API resources failed on prod
      - pagerduty/notify-on-failure:
          from_account: "srikanth.koneru@lightbend.com"
          incident_description: Validate API resources failed on prod.
          incident_key:  "VALIDATE_API_RESOURCES_FAILED_ON_PROD"
          incident_title: ${CIRCLE_JOB} Validate API Resoruces Failed.
          only_for_branches: "master"
          priority: "PXGHGTY" # S3
          service: "P97VQEO"  # Cloudstate Production
          urgency: low

  # Stage-VAR-Test
  stage_var_test:
    docker:
      - image: google/cloud-sdk
    description: "Stage Validate API Resources"
    steps:
      - validate_api_resources:
          gcp_cluster_name: "stage-us-east-execution-1"
      - slack/status:
          channel: cloudstate-alerts
          failure_message: Validate API resources failed on stage
          mentions: "here"
          fail_only: true
          only_for_branches: "master"
      - slack/status:
          channel: cloudstate-alerts
          success_message: Validate API resources passed on stage
          failure_message: Validate API resources failed on stage
      - pagerduty/notify-on-failure:
          from_account: "srikanth.koneru@lightbend.com"
          incident_description: Validate API resources failed on prod.
          incident_key:  "VALIDATE_API_RESOURCES_FAILED_ON_STAGE"
          incident_title: ${CIRCLE_JOB} Validate API Resoruces Failed.
          only_for_branches: "master"
          priority: "PXGHGTY" # S3 Partial Outage
          service: "P06K63Z"  # Cloudstate Stage
          urgency: low

  # Dev-VAR-Test
  dev_var_test:
    docker:
      - image: google/cloud-sdk
    description: "Stage Validate API Resources"
    steps:
      - validate_api_resources:
          gcp_cluster_name: "dev-us-east-execution-1"
      - slack/status:
          channel: cloudstate-alerts
          failure_message: Validate API resources failed on dev
          # mentions: "here"
          fail_only: true
          only_for_branches: "master"
      - slack/status:
          channel: cloudstate-alerts
          success_message: Validate API resources success on dev
          failure_message: Validate API resources failed on dev

workflows:
  version: 2

  native-image-tests:
    jobs:
      - native-image-it-test:
          filters:
            branches:
              ignore: /.*/

  test:
    jobs:
      - prod_auth_test:
        filters:
          branches:
            only:
              - cron-test
      - stage_auth_test:
        filters:
          branches:
            only:
              - cron-test
      - prod_sc_test:
        filters:
          branches:
            only:
              - cron-test
      - stage_sc_test:
        filters:
          branches:
            only:
              - cron-test
      - dev_sc_test:
        filters:
          branches:
            only:
              - cron-test
      - prod_var_test:
        filters:
          branches:
            only:
              - cron-test
      - stage_var_test:
        filters:
          branches:
            only:
              - cron-test
      - dev_var_test:
        filters:
          branches:
            only:
              - cron-test

  # Scheduled at every hour 5 minutes
  cloudstate-machine-tests:
    triggers:
      - schedule:
          cron: "5 * * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - prod_auth_test
      - stage_auth_test
      - prod_sc_test
      - stage_sc_test
      # - dev_sc_test
      - prod_var_test
      - stage_var_test
      - dev_var_test
