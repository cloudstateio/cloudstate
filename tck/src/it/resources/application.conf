cloudstate-tck.verify = ["Akka + Node.js", "Akka + Java", "Akka + Go"]
#cloudstate-tck.verify = ["Akka + Node.js", "Akka + Java", "Akka + Go", "Akka + Kotlin"]
cloudstate-tck.combinations = [{
  name = "Akka + Node.js"
  tck {
    hostname = "0.0.0.0"
    port = 8090
  }
  proxy {
    hostname = "127.0.0.1"
    port = 9000
    directory = ${user.dir}
    command = ["java","-Xmx512M", "-Xms128M", "-Dconfig.resource=in-memory.conf", "-Dcloudstate.proxy.dev-mode-enabled=true", "-jar", "proxy/core/target/scala-2.13/akka-proxy.jar"]
    // Switch to this if you want to use the tck to generate GraalVM Assisted Configuration generation when running the TCK
    // command = [""${GRAALVM_HOME}"/bin/java", "-agentlib:native-image-agent=config-output-dir="${user.dir}"/proxy/core/graal","-Xmx512M", "-Xms128M", "-Dconfig.resource=in-memory.conf", "-Dcloudstate.proxy.dev-mode-enabled=true", "-jar", "proxy/core/target/scala-2.13/akka-proxy.jar"]
    // Switch to this to run the TCK with the Graal native image in a docker container.
    //command = ["docker", "run", "--rm", "--name", "cloudstate-proxy-tck", "-p", "9000:9000", "cloudstate-proxy-dev-mode",
    //  "-Dcloudstate.proxy.user-function-port=8090", "-Dcloudstate.proxy.user-function-interface=%LOCALHOST%"]
    //stop-command = ["docker", "stop", "cloudstate-proxy-tck"]
    // Switch to this to run the TCK with a native image that has been built for the local platform.
    // Make sure that the ENV JAVA_LIBRARY_PATH is set to the /lib dir of the JRE to load libraries from
    //command = ["proxy/core/target/graalvm-native-image/cloudstate-proxy-core", "-Djava.library.path="${JAVA_LIBRARY_PATH}]

    env-vars {
      USER_FUNCTION_PORT = "8090"
    }
  }

  service {
    hostname = "127.0.0.1"
    port = 8080
    directory = ${user.dir}/node-support/tck
    command = ["node", "index.js"]
    env-vars {
      DEBUG = "cloudstate-*"
    }
  }
},{
  name = "Akka + Java"
  tck {
    hostname = "0.0.0.0"
    port = 8090
  }
  proxy {
    hostname = "127.0.0.1"
    port = 9000
    directory = ${user.dir}
    command = ["java","-Xmx512M", "-Xms128M", "-Dconfig.resource=in-memory.conf", "-Dcloudstate.proxy.dev-mode-enabled=true", "-jar", "proxy/core/target/scala-2.13/akka-proxy.jar"]
    //command = ["proxy/core/target/graalvm-native-image/cloudstate-proxy-core", "-Djava.library.path="${JAVA_HOME}"/lib", "-Dconfig.resource=in-memory.conf", "-Dcloudstate.proxy.dev-mode-enabled=true"]

    env-vars {
      USER_FUNCTION_PORT = "8090"
    }
  }

  service {
    hostname = "127.0.0.1"
    port = 8088
    directory = ${user.dir}/java-support/tck
    command = ["java","-Xmx512M", "-Xms128M", "-jar", "target/scala-2.13/cloudstate-java-tck.jar"]
    env-vars {
      HOST = "127.0.0.1"
      PORT = "8088"
    }
  }
},{
  name = "Akka + Go"
  tck {
    hostname = "0.0.0.0"
    port = 8090
  }
  proxy {
    hostname = "127.0.0.1"
    port = 9000
    directory = ${user.dir}
    command = ["java","-Xmx512M", "-Xms128M", "-Dconfig.resource=in-memory.conf", "-Dcloudstate.proxy.dev-mode-enabled=true", "-jar", "proxy/core/target/scala-2.13/akka-proxy.jar"]
    env-vars {
      USER_FUNCTION_PORT = "8090"
    }
  }

  service {
    port = 8080
    docker-image = "cloudstateio/cloudstate-go-tck:latest"
  }
},{
  name = "Akka + Kotlin"
  tck {
    hostname = "0.0.0.0"
    port = 8090
  }
  proxy {
    hostname = "127.0.0.1"
    port = 9000
    directory = ${user.dir}
    command = ["java","-Xmx512M", "-Xms128M", "-Dconfig.resource=in-memory.conf", "-Dcloudstate.proxy.dev-mode-enabled=true", "-jar", "proxy/core/target/scala-2.13/akka-proxy.jar"]
    env-vars {
      USER_FUNCTION_PORT = "8090"
    }
  }

  service {
    hostname = "127.0.0.1"
    port = 8088
    directory = ${user.dir}
    command = ["docker", "run", "--rm", "-p", "127.0.0.1:8088:8080", "sleipnir/shopping-cart:latest"]
    env-vars {
      HOST = "127.0.0.1"
      PORT = "8088"
    }
  }
}]
