// Copyright 2019 Lightbend Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// gRPC interface for CRUD Entity user functions.

syntax = "proto3";

package cloudstate.crud;

// Any is used so that domain events defined according to the functions business domain can be embedded inside
// the protocol.
import "google/protobuf/any.proto";
import "google/protobuf/empty.proto";
import "cloudstate/entity.proto";

option java_package = "io.cloudstate.protocol";
option go_package = "cloudstate/protocol";

message CreateCommand {
}
message FetchCommand {
}
message UpdateCommand {
}
message DeleteCommand {
}

// Type of command supported
message CrudCommandType {
    oneof command {
        CreateCommand create = 1;
        FetchCommand fetch = 2;
        UpdateCommand update = 3;
        DeleteCommand delete = 4;
    }
}

// The persisted state with the sequence number of the last snapshot
message CrudState {
    // The state payload
    google.protobuf.Any payload = 2;

    // The sequence number when the snapshot was taken.
    int64 snapshot_sequence = 1;
}

// Message for initiating the command execution.
// The message contains the command type to be able to identify the crud operation being called
message CrudEntityCommand {
    // The ID of the entity.
    string entity_id = 1;

    // The ID of a sub entity.
    //string sub_entity_id = 2;

    // Command name
    string name = 2;

    // The command payload.
    google.protobuf.Any payload = 3;

    // The command type.
    CrudCommandType type = 4;
}

// The command to be executed.
// The supported crud operations are create, fetch, update, delete.
message CrudCommand {
    // The name of the service this crud entity is on.
    string service_name = 1;

    // The ID of the entity.
    string entity_id = 2;

    // The ID of a sub entity.
    string sub_entity_id = 3;

    // A command id.
    int64 id = 4;

    // Command name
    string name = 5;

    // The command payload.
    google.protobuf.Any payload = 6;

    // The persisted state to be conveyed between the CRUD entity and the user function.
    CrudState state = 7;
}

// A reply to a command.
message CrudReply {

    // The id of the command being replied to. Must match the input command.
    int64 command_id = 1;

    // The action to take
    ClientAction client_action = 2;

    // Any side effects to perform
    repeated SideEffect side_effects = 3;

    // An optional state to persist.
    google.protobuf.Any state = 4;

    // An optional snapshot to persist. It is assumed that this snapshot represents any state in the state field
    // persisted before. It is illegal to send a snapshot without sending any events.
    // Note that the state overrides the snapshot and the state is not applied to the snapshot.
    google.protobuf.Any snapshot = 5;
}

// A reply message type for the gRPC call.
message CrudReplyOut {
    oneof message {
        CrudReply reply = 1;
        Failure failure = 2;
    }
}

// CRUD Protocol
//
// Each operation sent across this protocol has among others information the state of the CRUD entity.
// The Cloudstate proxy is responsible to load the state, if any exists, from the CRUD entity and to pass it to
// the user function which holds it in memory to handle the operation being executed. The Cloudstate proxy updates
// the state in the user function successfully before executing the operation. The Cloudstate proxy executes one
// operation waits for the result and replies before executing the next operation, the operations are executed in order.
// This way the state is always in sync in the user function. Write operations could emit new state and
// read operations should not. The CRUD entity is backed by an event sourced entity, it means emitted state is an
// event sourced event.
//
// For each operation the first message sent to the CRUD entity is CrudEntityCommand which contains the entity ID and
// the command type to know which operation to call. The CrudEntityCommand is mapped to CrudCommand which contains the
// entity ID, the state and the snapshot sequence number. The state exists if the entity has previously persisted a
// state. It is the same with the snapshot sequence number. Once an operation is called the CrudCommand is passed to it.
// Each operation returns a reply message CrudReplyOut to each CrudCommand. The reply message contains the new state
// and the snapshot to be persisted. For CrudReplyOut the state exists if the user function emits a state change.
// Snapshot for CrudReplyOut exists if the snapshot configuration is fulfilled. The CRUD entity is expected to reply to
// each CrudEntityCommand.
//
// The user function is not responsible for updating its state in memory, it should rather emit the new state to
// the Cloudstate proxy. The Cloudstate proxy is responsible to pass the new state to the CRUD entity,
// so that it can be applied. The Cloudstate proxy loads the persisted state for subsequents operations.
// The user function could emit new state for write operations.
//
// The service could not been initialized before an operation is executed. In this case this operation will init
// the service. Each operation always check if the service is initialized.
//
//
service Crud {

    // This operation creates a sub entity.
    rpc create(CrudCommand) returns (CrudReplyOut) {}

    // This operation fetches the CRUD entity or a sub entity.
    rpc fetch(CrudCommand) returns (CrudReplyOut) {}

    // This operation updates the the CRUD entity or a sub entity.
    rpc update(CrudCommand) returns (CrudReplyOut) {}

    // This operation deletes a sub entity.
    rpc delete(CrudCommand) returns (CrudReplyOut) {}
}
