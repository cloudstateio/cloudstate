// Copyright 2019 Lightbend Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// gRPC interface for CRUD Entity user functions.

syntax = "proto3";

package cloudstate.crudone;

// Any is used so that domain events defined according to the functions business domain can be embedded inside
// the protocol.
import "google/protobuf/any.proto";
import "google/protobuf/empty.proto";
import "cloudstate/entity.proto";
//import "cloudstate/sub_entity.proto";

option java_package = "io.cloudstate.protocol";
option go_package = "cloudstate/protocol";

// The init message. This will always be the first message sent to the entity when
// it is loaded.
message CrudInit {

    string service_name = 1;

    // The ID of the entity.
    string entity_id = 2;

    // If present the entity should initialise its state using this snapshot.
    CrudSnapshot snapshot = 3;
}

// A snapshot
message CrudSnapshot {

    // The sequence number when the snapshot was taken.
    int64 snapshot_sequence = 1;

    // The snapshot.
    google.protobuf.Any snapshot = 2;
}

// An event. These will be sent to the entity when the entity starts up.
message CrudEvent {

    // The sequence number of the event.
    int64 sequence = 1;

    // The event payload.
    google.protobuf.Any payload = 2;
}

// A reply to a command.
message CrudReply {

    // The id of the command being replied to. Must match the input command.
    int64 command_id = 1;

    // The action to take
    ClientAction client_action = 2;

    // Any side effects to perform
    repeated SideEffect side_effects = 3;

    // A list of events to persist - these will be persisted before the reply
    // is sent.
    repeated google.protobuf.Any events = 4;

    // An optional snapshot to persist. It is assumed that this snapshot will have
    // the state of any events in the events field applied to it. It is illegal to
    // send a snapshot without sending any events.
    google.protobuf.Any snapshot = 5;
}

// A CRUD command. For each CRUD command received, a reply must be sent with a matching command id.
message CrudCreateCommand {

    // The ID of the entity.
    string entity_id = 1;

    // The ID of a sub entity.
    string sub_entity_id = 2;

    // A command id.
    int64 id = 3;

    // Command name
    string name = 4;

    // The command payload.
    google.protobuf.Any payload = 5;

    // Whether the command is streamed or not
    bool streamed = 6;
}

// A CRUD command. For each CRUD command received, a reply must be sent with a matching command id.
message CrudFetchCommand {

    // The ID of the entity.
    string entity_id = 1;

    // The ID of a sub entity.
    string sub_entity_id = 2;

    // A command id.
    int64 id = 3;

    // Command name
    string name = 4;

    // The command payload.
    google.protobuf.Any payload = 5;

    // Whether the command is streamed or not
    bool streamed = 6;
}

// Input message type for the gRPC stream in.
message CrudStreamIn {
    oneof message {
        CrudInit init = 1;
        CrudEvent event = 2;
        CrudCreateCommand create = 3;
        CrudFetchCommand fetch = 4;
    }
}

// Output message type for the gRPC stream out.
message CrudStreamOut {
    oneof message {
        CrudReply reply = 1;
        Failure failure = 2;
    }
}

message CrudCommandResponse {
    oneof response {
        CrudReply reply = 1;
        Failure failure = 2;
    }
}

// The CRUD Entity service
service CrudOne {

    rpc handle(stream CrudStreamIn) returns (stream CrudStreamOut) {}
}
