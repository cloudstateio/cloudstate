// Copyright 2019 Lightbend Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

import "cloudstate/entity_key.proto";
import "google/protobuf/empty.proto";

package com.example.crdts;

message UpdateCounter {
    string key = 1 [(.cloudstate.entity_key) = true];
    int64 value = 2;
}

message CounterValue {
    int64 value = 1;
}

message Get {
    string key = 1 [(.cloudstate.entity_key) = true];
}

message SomeValue {
    string key = 1;
    string description = 2;
}

message MutateSet {
    string key = 1 [(.cloudstate.entity_key) = true];
    bool clear = 2;
    repeated SomeValue remove = 3;
    repeated SomeValue add = 4;
}

message SetSize {
    int32 size = 1;
}

message SetValue {
    repeated SomeValue items = 1;
}

message User {
    string name = 1 [(.cloudstate.entity_key) = true];
}

message OnlineStatus {
    bool online = 1;
}

service CrdtExample {
    rpc IncrementGCounter(UpdateCounter) returns (CounterValue);
    rpc GetGCounter(Get) returns (CounterValue);

    rpc UpdatePNCounter(UpdateCounter) returns (CounterValue);
    rpc GetPNCounter(Get) returns (CounterValue);

    rpc MutateGSet(MutateSet) returns (SetSize);
    rpc GetGSet(Get) returns (SetValue);

    rpc MutateORSet(MutateSet) returns (SetSize);
    rpc GetORSet(Get) returns (SetValue);

    // Connect the given user. They will stay connected as long as the stream stays open.
    rpc Connect(User) returns (stream google.protobuf.Empty);
    // Monitor the online status of the given user.
    rpc Monitor(User) returns (stream OnlineStatus);
}
