cloudstate.proxy {
    dev-mode-enabled = false
    ready-timeout = 1s
    http-interface = "0.0.0.0"
    http-port = 9000
    http-port = ${?HTTP_PORT}
    user-function-host = "127.0.0.1"
    user-function-host = ${?USER_FUNCTION_HOST}
    user-function-port = 8080
    user-function-port = ${?USER_FUNCTION_PORT}
    protocol-compatibility-check = true
    relay-timeout = 1m
    max-inbound-message-size = 12M
    relay-buffer-size = 100
    graceful-termination-timeout = 10s
    number-of-shards = 100
    proxy-parallelism = 100
    backoff {
      min = 1s
      max = 10s
      random-factor = 0.2
    }

    eventsourced-entity {
        # If using a config that enables it, then set to true
        journal-enabled = false

        # Passivation timeout for Event-Sourced Entities. It is recommended to change the value for production use.
        # 30s is used for testing purposes.
        passivation-timeout = 30s

        # The id of the read journal plugin
        read-journal = ""

        # The projection support
        projection-support {
            enabled = false

            # Class of the projection support
            class = ""
        }
    }

    crdt-entity {
        # Passivation timeout for CRDT Entities. It is recommended to change the value for production use.
        # 30s is used for testing purposes.
        passivation-timeout = 30s
    }

    telemetry {
        # Whether telemetry (instrumentation and prometheus exporter) should be disabled
        disabled = ${cloudstate.proxy.dev-mode-enabled}

        prometheus {
            # Prometheus exporter host
            host = "0.0.0.0"
            host = ${?METRICS_HOST}

            # Prometheus exporter port
            port = 9090
            port = ${?METRICS_PORT}

            # Whether to use the Prometheus default registry (or create a separate registry)
            use-default-registry = true
        }
    }

    autoscaler {
        # For now, disable it because CRDTs don't yet support autoscaling
        enabled = false
        enabled = ${?AUTOSCALER_ENABLED}

        target-concurrency {
            user-function = 1
            user-function = ${?USER_FUNCTION_TARGET_CONCURRENCY}

            request = 50
            request = ${?REQUEST_TARGET_CONCURRENCY}

            window = 1m
            window = ${?TARGET_CONCURRENCY_WINDOW}
        }

        scale-up-stable-deadline = 3m
        scale-up-stable-deadline = ${?SCALE_UP_STABLE_DEADLINE}
        scale-down-stable-deadline = 30s
        scale-down-stable-deadline = ${?SCALE_DOWN_STABLE_DEADLINE}

        request-rate {
            threshold-factor = 1.5
            threshold-factor = ${?REQUEST_RATE_THRESHOLD_FACTOR}

            window = 6s
            threshold-factor = ${?REQUEST_RATE_WINDOW}
        }

        max-scale-factor = 0.0
        max-scale = 2
        max-members = 100

        tick-period = 2s
    }

    # Configures the eventing functionality
    eventing {
        # Valid options are currently: "none", and "google-pubsub"
        support = "none"

        # This configuration is used when support is set to "google-pubsub"
        google-pubsub {
            # Where to connect to, use "pubsub.googleapis.com" to connect to Google Cloud Pubsub.
            host = "pubsub.googleapis.com"

            # What port to connect to, use 443 for Google Cloud Pubsub.
            port = 443

            # Set to "none" to disable TLS.
            # Valid options are, "none", and "GoogleInternetAuthorityG3.crt"
            rootCa = "none"

            # Valid options are, "none", and "google-application-default".
            callCredentials = "none"

            # The identifier of the Google Pubsub Project to use, must be set.
            project-id = ""
            project-id = ${?PUBSUB_PROJECT_ID}

            # Sets the frequency of retrieving messages
            poll-interval = 1s

            # Sets the deadline for a message to be ack:ed, must be 10-600s
            upstream-ack-deadline = 10s

            # Sets the deadline for determining when a batch of outbound messages is ready to be sent.
            # If set to 0 then batching will be turned off.
            downstream-batch-deadline = 5s

            # Sets the maximum size for a batch of outbound messages, must be greater than 0.
            # If set to 1 then batching will be turned off.
            downstream-batch-size = 10

            # Valid options are: "manually", "by-proxy"
            # "manually" means that they are created and configured manually
            # "by-proxy" means that the proxy will create the subscriptions and topics if needed
            # NOT AVAILABLE YET: "using-crd" means that the proxy will create CRDs and a k8s operator will manage them
            manage-topics-and-subscriptions = "manually"
        }
    }

    value-entity {
        # Enable the Value Entity functionality by setting it to true
        enabled = false

        # Passivation timeout for Value Entities. It is recommended to change the value for production use.
        # 30s is used for testing purposes.
        passivation-timeout = 30s

        # Configures the persistence store for the Value Entity when value-entity.enabled is true
        persistence {
            # This property indicates the type of store to be used for Value Entity.
            # Valid options are: "in-memory" or "jdbc" (when using a JDBC proxy like Postgres)
            # "in-memory" means the data are persisted in memory.
            # "jdbc" means the data are persisted in a configured native JDBC database.
            store = "in-memory"

            in-memory {
                store-class = "io.cloudstate.proxy.valueentity.store.InMemoryStore"
            }
        }
    }
}
