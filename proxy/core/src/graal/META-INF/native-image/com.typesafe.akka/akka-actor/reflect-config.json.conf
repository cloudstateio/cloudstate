[
{
  name: "akka.dispatch.forkjoin.ForkJoinPool"
  fields: [
    {name: "ctl"}
    {name: "indexSeed"}
    {name: "plock"}
    {name: "stealCount"}
  ]
}
{
  name: "akka.dispatch.forkjoin.ForkJoinPool$WorkQueue"
  fields: [{name: "qlock"}]
}
{
  name: "akka.dispatch.forkjoin.ForkJoinTask"
  fields: [{name: "status"}]
}
{
  name: "akka.actor.ActorCell"
  allDeclaredFields: true
}
{
  name: "akka.actor.ActorIdentity"
}
{
  name: "akka.actor.ActorInitializationException"
}
{
  name: "akka.actor.ActorKilledException"
}
{
  name: "akka.actor.ActorRef"
}
{
  name: "akka.actor.ActorSelectionMessage"
}
{
  name: "akka.actor.DefaultSupervisorStrategy"
  methods: [{name: "<init>", parameterTypes: []}]
}
{
  name: "akka.actor.Identify"
}
{
  name: "akka.actor.IllegalActorStateException"
}
{
  name: "akka.actor.InvalidActorNameException"
}
{
  name: "akka.actor.InvalidMessageException"
}
{
  name: "akka.actor.Kill$"
}
{
  name: "akka.actor.LightArrayRevolverScheduler"
  methods: [{name: "<init>", parameterTypes: ["com.typesafe.config.Config", "akka.event.LoggingAdapter", "java.util.concurrent.ThreadFactory"]}]
}
{
  name: "akka.actor.LightArrayRevolverScheduler$TaskHolder"
  fields: [{name: "task"}]
}
{
  name: "akka.actor.LocalActorRefProvider$SystemGuardian"
}
{
  name: "akka.actor.LocalScope$"
}
{
  name: "akka.actor.PoisonPill$"
}
{
  name: "akka.actor.Props$EmptyActor"
  methods: [{name: "<init>", parameterTypes: []}]
}
{
  name: "akka.actor.RepointableActorRef"
  fields: [
    {name: "_cellDoNotCallMeDirectly"}
    {name: "_lookupDoNotCallMeDirectly"}
  ]
}
{
  name: "akka.actor.Status$Failure"
}
{
  name: "akka.actor.Status$Success"
}
{
  name: "akka.dispatch.AbstractNodeQueue"
  fields: [{name: "_tailDoNotCallMeDirectly"}]
}
{
  name: "akka.dispatch.AbstractNodeQueue$Node"
  fields: [{name: "_nextDoNotCallMeDirectly"}]
}
{
  name: "akka.dispatch.BoundedControlAwareMessageQueueSemantics"
}
{
  name: "akka.dispatch.BoundedDequeBasedMessageQueueSemantics"
}
{
  name: "akka.dispatch.BoundedMessageQueueSemantics"
}
{
  name: "akka.dispatch.ControlAwareMessageQueueSemantics"
}
{
  name: "akka.dispatch.DequeBasedMessageQueueSemantics"
}
{
  name: "akka.dispatch.Mailbox"
  fields: [
    {name: "_statusDoNotCallMeDirectly"}
    {name: "_systemQueueDoNotCallMeDirectly"}
  ]
}
{
  name: "akka.dispatch.MessageDispatcher"
  fields: [
    {name: "_inhabitantsDoNotCallMeDirectly"}
    {name: "_shutdownScheduleDoNotCallMeDirectly"}
  ]
}
{
  name: "akka.dispatch.MultipleConsumerSemantics"
}
{
  name: "akka.dispatch.UnboundedControlAwareMessageQueueSemantics"
}
{
  name: "akka.dispatch.UnboundedDequeBasedMailbox"
  methods: [{name: "<init>", parameterTypes: ["akka.actor.ActorSystem$Settings", "com.typesafe.config.Config"]}]
}
{
  name: "akka.dispatch.UnboundedDequeBasedMessageQueueSemantics"
}
{
  name: "akka.dispatch.UnboundedMailbox"
  methods: [{name: "<init>", parameterTypes: ["akka.actor.ActorSystem$Settings", "com.typesafe.config.Config"]}]
}
{
  name: "akka.dispatch.UnboundedMessageQueueSemantics"
}
{
  name: "akka.dispatch.sysmsg.SystemMessage"
}
{
  name: "akka.event.DeadLetterListener"
}
{
  name: "akka.event.EventStreamUnsubscriber"
  allDeclaredConstructors: true
}
{
  name: "akka.event.LoggerMailboxType"
  methods: [{name: "<init>", parameterTypes: ["akka.actor.ActorSystem$Settings", "com.typesafe.config.Config"]}]
}
{
  name: "akka.event.LoggerMessageQueueSemantics"
}
{
  name: "akka.io.SelectionHandler"
  allDeclaredConstructors: true
}
{
  name: "akka.io.SelectionHandler$SelectorBasedManager"
}
{
  name: "akka.io.TcpConnection"
}
{
  name: "akka.io.TcpIncomingConnection"
  allDeclaredFields: true
  allDeclaredConstructors: true
}
{
  name: "akka.io.TcpListener"
  allDeclaredFields: true
  allDeclaredConstructors: true
}
{
  name: "akka.io.TcpManager"
  allDeclaredFields: true
  allDeclaredConstructors: true
}
{
  name: "akka.pattern.CircuitBreaker"
  fields: [
    {name: "_currentResetTimeoutDoNotCallMeDirectly"}
    {name: "_currentStateDoNotCallMeDirectly"}
  ]
}
{
  name: "akka.pattern.PromiseActorRef"
  fields: [
    {name: "_stateDoNotCallMeDirectly"}
    {name: "_watchedByDoNotCallMeDirectly"}
  ]
}
{
  name: "akka.pattern.internal.BackoffOnRestartSupervisor"
}
{
  name: "akka.pattern.internal.BackoffOnStopSupervisor"
}
{
  name: "akka.routing.BalancingPool"
}
{
  name: "akka.routing.BroadcastGroup"
}
{
  name: "akka.routing.BroadcastPool"
}
{
  name: "akka.routing.ConsistentHashingPool"
  methods: [{name: "<init>", parameterTypes: ["com.typesafe.config.Config"]}]
}
{
  name: "akka.routing.DefaultResizer"
}
{
  name: "akka.routing.FromConfig"
}
{
  name: "akka.routing.RandomGroup"
}
{
  name: "akka.routing.RandomPool"
}
{
  name: "akka.routing.RoundRobinGroup"
}
{
  name: "akka.routing.RoundRobinPool"
  methods: [{name: "<init>", parameterTypes: ["com.typesafe.config.Config"]}]
}
{
  name: "akka.routing.RoutedActorCell$RouterActorCreator"
  allDeclaredConstructors: true
}
{
  name: "akka.routing.RouterActor"
}
{
  name: "akka.routing.RouterPoolActor"
  allDeclaredFields: true
}
{
  name: "akka.routing.ScatterGatherFirstCompletedGroup"
}
{
  name: "akka.routing.ScatterGatherFirstCompletedPool"
}
{
  name: "akka.routing.SmallestMailboxPool"
}
{
  name: "akka.routing.TailChoppingGroup"
}
{
  name: "akka.routing.TailChoppingPool"
}
{
  name: "akka.serialization.SerializationExtension$"
  fields: [{name: "MODULE$"}]
}
{
  name: "akka.util.ByteString$ByteString1"
}
{
  name: "akka.util.ByteString$ByteString1C"
}
{
  name: "akka.util.ByteString$ByteStrings"
}
]
