[
{
  name: "io.netty.channel.ChannelDuplexHandler"
  methods: [
    {name: "bind", parameterTypes: ["io.netty.channel.ChannelHandlerContext", "java.net.SocketAddress", "io.netty.channel.ChannelPromise"]}
    {name: "close", parameterTypes: ["io.netty.channel.ChannelHandlerContext", "io.netty.channel.ChannelPromise"]}
    {name: "connect", parameterTypes: ["io.netty.channel.ChannelHandlerContext", "java.net.SocketAddress", "java.net.SocketAddress", "io.netty.channel.ChannelPromise"]}
    {name: "deregister", parameterTypes: ["io.netty.channel.ChannelHandlerContext", "io.netty.channel.ChannelPromise"]}
    {name: "disconnect", parameterTypes: ["io.netty.channel.ChannelHandlerContext", "io.netty.channel.ChannelPromise"]}
    {name: "flush", parameterTypes: ["io.netty.channel.ChannelHandlerContext"]}
    {name: "read", parameterTypes: ["io.netty.channel.ChannelHandlerContext"]}
  ]
}
{
  name: "io.netty.channel.ChannelHandlerAdapter"
  methods: [{name: "exceptionCaught", parameterTypes: ["io.netty.channel.ChannelHandlerContext", "java.lang.Throwable"]}]
}
{
  name: "io.netty.channel.ChannelInboundHandlerAdapter"
  methods: [
    {name: "channelActive", parameterTypes: ["io.netty.channel.ChannelHandlerContext"]}
    {name: "channelInactive", parameterTypes: ["io.netty.channel.ChannelHandlerContext"]}
    {name: "channelRead", parameterTypes: ["io.netty.channel.ChannelHandlerContext", "java.lang.Object"]}
    {name: "channelReadComplete", parameterTypes: ["io.netty.channel.ChannelHandlerContext"]}
    {name: "channelRegistered", parameterTypes: ["io.netty.channel.ChannelHandlerContext"]}
    {name: "channelUnregistered", parameterTypes: ["io.netty.channel.ChannelHandlerContext"]}
    {name: "channelWritabilityChanged", parameterTypes: ["io.netty.channel.ChannelHandlerContext"]}
    {name: "exceptionCaught", parameterTypes: ["io.netty.channel.ChannelHandlerContext", "java.lang.Throwable"]}
    {name: "userEventTriggered", parameterTypes: ["io.netty.channel.ChannelHandlerContext", "java.lang.Object"]}
  ]
}
{
  name: "io.netty.channel.ChannelInitializer"
  methods: [
    {name: "channelRegistered", parameterTypes: ["io.netty.channel.ChannelHandlerContext"]}
    {name: "exceptionCaught", parameterTypes: ["io.netty.channel.ChannelHandlerContext", "java.lang.Throwable"]}
  ]
}
{
  name: "io.netty.channel.ChannelOutboundHandlerAdapter"
  methods: [
    {name: "bind", parameterTypes: ["io.netty.channel.ChannelHandlerContext", "java.net.SocketAddress", "io.netty.channel.ChannelPromise"]}
    {name: "close", parameterTypes: ["io.netty.channel.ChannelHandlerContext", "io.netty.channel.ChannelPromise"]}
    {name: "connect", parameterTypes: ["io.netty.channel.ChannelHandlerContext", "java.net.SocketAddress", "java.net.SocketAddress", "io.netty.channel.ChannelPromise"]}
    {name: "deregister", parameterTypes: ["io.netty.channel.ChannelHandlerContext", "io.netty.channel.ChannelPromise"]}
    {name: "disconnect", parameterTypes: ["io.netty.channel.ChannelHandlerContext", "io.netty.channel.ChannelPromise"]}
    {name: "flush", parameterTypes: ["io.netty.channel.ChannelHandlerContext"]}
    {name: "read", parameterTypes: ["io.netty.channel.ChannelHandlerContext"]}
  ]
}
{
  name: "io.netty.channel.DefaultChannelPipeline$HeadContext"
  methods: [
    {name: "bind", parameterTypes: ["io.netty.channel.ChannelHandlerContext", "java.net.SocketAddress", "io.netty.channel.ChannelPromise"]}
    {name: "channelActive", parameterTypes: ["io.netty.channel.ChannelHandlerContext"]}
    {name: "channelInactive", parameterTypes: ["io.netty.channel.ChannelHandlerContext"]}
    {name: "channelRead", parameterTypes: ["io.netty.channel.ChannelHandlerContext", "java.lang.Object"]}
    {name: "channelReadComplete", parameterTypes: ["io.netty.channel.ChannelHandlerContext"]}
    {name: "channelRegistered", parameterTypes: ["io.netty.channel.ChannelHandlerContext"]}
    {name: "channelUnregistered", parameterTypes: ["io.netty.channel.ChannelHandlerContext"]}
    {name: "channelWritabilityChanged", parameterTypes: ["io.netty.channel.ChannelHandlerContext"]}
    {name: "close", parameterTypes: ["io.netty.channel.ChannelHandlerContext", "io.netty.channel.ChannelPromise"]}
    {name: "connect", parameterTypes: ["io.netty.channel.ChannelHandlerContext", "java.net.SocketAddress", "java.net.SocketAddress", "io.netty.channel.ChannelPromise"]}
    {name: "deregister", parameterTypes: ["io.netty.channel.ChannelHandlerContext", "io.netty.channel.ChannelPromise"]}
    {name: "disconnect", parameterTypes: ["io.netty.channel.ChannelHandlerContext", "io.netty.channel.ChannelPromise"]}
    {name: "exceptionCaught", parameterTypes: ["io.netty.channel.ChannelHandlerContext", "java.lang.Throwable"]}
    {name: "flush", parameterTypes: ["io.netty.channel.ChannelHandlerContext"]}
    {name: "read", parameterTypes: ["io.netty.channel.ChannelHandlerContext"]}
    {name: "userEventTriggered", parameterTypes: ["io.netty.channel.ChannelHandlerContext", "java.lang.Object"]}
    {name: "write", parameterTypes: ["io.netty.channel.ChannelHandlerContext", "java.lang.Object", "io.netty.channel.ChannelPromise"]}
  ]
}
{
  name: "io.netty.channel.DefaultChannelPipeline$TailContext"
  methods: [
    {name: "channelActive", parameterTypes: ["io.netty.channel.ChannelHandlerContext"]}
    {name: "channelInactive", parameterTypes: ["io.netty.channel.ChannelHandlerContext"]}
    {name: "channelRead", parameterTypes: ["io.netty.channel.ChannelHandlerContext", "java.lang.Object"]}
    {name: "channelReadComplete", parameterTypes: ["io.netty.channel.ChannelHandlerContext"]}
    {name: "channelRegistered", parameterTypes: ["io.netty.channel.ChannelHandlerContext"]}
    {name: "channelUnregistered", parameterTypes: ["io.netty.channel.ChannelHandlerContext"]}
    {name: "channelWritabilityChanged", parameterTypes: ["io.netty.channel.ChannelHandlerContext"]}
    {name: "exceptionCaught", parameterTypes: ["io.netty.channel.ChannelHandlerContext", "java.lang.Throwable"]}
    {name: "userEventTriggered", parameterTypes: ["io.netty.channel.ChannelHandlerContext", "java.lang.Object"]}
  ]
}
{
  name: "io.netty.channel.SimpleChannelInboundHandler"
  methods: [{name: "channelRead", parameterTypes: ["io.netty.channel.ChannelHandlerContext", "java.lang.Object"]}]
}
{
  name: "io.netty.channel.socket.nio.NioSocketChannel"
  methods: [{name: "<init>", parameterTypes: []}]
}
]
